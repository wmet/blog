{"meta":{"title":"代码客","subtitle":"热爱代码/自动化","description":"一心一意写代码","author":"Milk","url":"https://blog.wzjs010.cc"},"posts":[{"title":"hexo博客 Git搭建步骤","slug":"hexo博客-Git搭建步骤","date":"2018-12-04T08:43:00.000Z","updated":"2018-12-04T09:05:00.842Z","comments":true,"path":"2018/12/04/hexo博客-Git搭建步骤/","link":"","permalink":"https://blog.wzjs010.cc/2018/12/04/hexo博客-Git搭建步骤/","excerpt":"","text":"前提条件 安装git软件和nodejs 执行npm install -g hexo-cli全局安装 安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。 123$ hexo init &lt;folder&gt;$ cd &lt;folder&gt;$ npm install 常用指令 123hexo new &quot;xxx&quot; #新建文章hexo g 生成htmlhexo d 发布文章 配置git，几个关键的配置项目 123456789101112131415161718 url: https://blog.wzjs010.cc #网址的url地址，配合Cname使用 deploy: #发布的git地址 type: git repo: git@github.com:wmet/wmet.github.io.git branch: master message: auto deploy``` 新建个master分支，用来存放生成的html文件 然后建立hexo分支，用来存放源码 通过`git checkout hexo,git checkout master `来切换分支 ```git git checkout hexo #切换hexo分支 hexo new \"article name\" hexo clean hexo g hexo d #发布到github git commit -am \"new article\" git push #推送hexo分支","raw":null,"content":null,"categories":[{"name":"技术","slug":"技术","permalink":"https://blog.wzjs010.cc/categories/技术/"},{"name":"博客","slug":"技术/博客","permalink":"https://blog.wzjs010.cc/categories/技术/博客/"}],"tags":[{"name":"git","slug":"git","permalink":"https://blog.wzjs010.cc/tags/git/"},{"name":"hexo","slug":"hexo","permalink":"https://blog.wzjs010.cc/tags/hexo/"}]},{"title":"感想","slug":"感想","date":"2017-08-03T13:20:07.000Z","updated":"2018-12-04T08:26:41.002Z","comments":true,"path":"2017/08/03/感想/","link":"","permalink":"https://blog.wzjs010.cc/2017/08/03/感想/","excerpt":"","text":"人生是一个不断进行着的故事，故事的好坏、精彩程序由我们自己去演绎。 长这么大，很少去回顾自己经历的事情，每当梦中闪现过往的人和事情，总有些怀念的心情。这么大了，有的人已经离自己远去，永远不在回来了，还没有好好的去珍惜和他们在一起的日子。所以，活在当下，珍惜眼前人，是再也正确不过的了。 依稀记得小时候、童年拾麦穗，骑自行车，奶奶给咯的菜饺，很多很多的事，再也回不过去了，就绝的很是可惜。在中国，应该做些正义的事情，不畏强权，有自己的想法，就应该去实施。如果有机会出过，有了更大的空间，有了更大的事业，帮助更多的人。研究更新更高级的东西，人生除了享乐还有很多有意义的事情去做，放大自己的思维，去做自己能做的事情。","raw":null,"content":null,"categories":[{"name":"生活","slug":"生活","permalink":"https://blog.wzjs010.cc/categories/生活/"},{"name":"感想","slug":"生活/感想","permalink":"https://blog.wzjs010.cc/categories/生活/感想/"}],"tags":[{"name":"感想","slug":"感想","permalink":"https://blog.wzjs010.cc/tags/感想/"},{"name":"生活","slug":"生活","permalink":"https://blog.wzjs010.cc/tags/生活/"}]},{"title":"程序员的道路","slug":"程序员的道路","date":"2017-07-27T14:28:52.000Z","updated":"2018-12-04T08:26:41.002Z","comments":true,"path":"2017/07/27/程序员的道路/","link":"","permalink":"https://blog.wzjs010.cc/2017/07/27/程序员的道路/","excerpt":"","text":"今天看了一则旧闻，曾经自己佩服的一家公司“猿团教育”倒下了，短短不到两年时间吧，他曾经也创造了很多成就，他的经历也值得回顾一下，算是前车之鉴吧。 在前两年，自己刚开始学习程序，对程序的了解还很菜，基础的东西什么都不太懂，好在有一个自由的工作平台，工作不忙，可以充电，在一知半解的情况下，于网络中寻求学习的视频，猿团教育的apicloud、thinkphp等课程通俗易懂，很快就把他们网址加入了网络收藏夹，每天业余时间看、学习，当时看视频电脑上的时间，都是凌晨录制的，可想而知他们是多么的敬业。 慢慢的听到他们融资了，公司壮大了，有了很宽敞的办公场所。后来更多时间是忙于自己的工作，无暇关注和更多的去学习，但还是很佩服这家公司的，CEO很年轻，就能有这么大的成就。可想是很当时的努力、谦虚是分不开的。 只到今天想看下他最近怎么样了，看下他的变化，但网站打不开，百度搜索了下，才知道最近他们公司完了，欠薪很多。简单的浏览了下，发现融资后他开立分公司、买跑车、国外度假等，当初的谦虚低调不存在了，这样的结果也是很惋惜的。 所以，成功前谦虚努力，成功后更应保持，不要有膨胀的心，才能走的更远。作为一个程序员，更应该不断提升自己的技术水平、应该时刻保持谦卑心态，不管多成功，不忘初心方能得始终。 参考链接： 初笋科技：猿团6个月时间从估值2000万到2亿–访猿团CEO谢恩明成都猿团科技新浪博客 猿团科技_百度搜索 成都猿团科技CEO失联 曾获两轮天使投资新闻资讯新闻首页_成都全搜索 爆料：猿团科技CEO捐款逃跑后买豪宅豪车，旗下员工讨债无门！ 猿团科技CEO被曝失联欠薪 获天使投资成立不到2年新浪四川新浪网","raw":null,"content":null,"categories":[{"name":"生活","slug":"生活","permalink":"https://blog.wzjs010.cc/categories/生活/"},{"name":"感想","slug":"生活/感想","permalink":"https://blog.wzjs010.cc/categories/生活/感想/"}],"tags":[{"name":"感想","slug":"感想","permalink":"https://blog.wzjs010.cc/tags/感想/"},{"name":"生活","slug":"生活","permalink":"https://blog.wzjs010.cc/tags/生活/"},{"name":"程序员","slug":"程序员","permalink":"https://blog.wzjs010.cc/tags/程序员/"}]},{"title":"git中遇到的一些问题","slug":"git中遇到的一些问题","date":"2017-07-24T17:52:44.000Z","updated":"2018-12-04T08:26:41.002Z","comments":true,"path":"2017/07/25/git中遇到的一些问题/","link":"","permalink":"https://blog.wzjs010.cc/2017/07/25/git中遇到的一些问题/","excerpt":"","text":"git单机多用户设置有时候不同的项目需要用不同的账户，可以这样配置： 新建user2的SSH Key新建SSH key： 1234$ cd ~/.ssh # 切换到C:\\Users\\Administrator\\.sshssh-keygen -t rsa -C &quot;mywork@email.com&quot; # 新建工作的SSH key#设置名称为id_rsa_work Enter file in which to save the key (/c/Users/Administrator/.ssh/id_rsa): id_rsa_work 新密钥添加到SSH agent中 12ssh-agent bashssh-add ~/.ssh/id_rsa_work 修改config文件在~/.ssh目录下找到config文件，如果没有就创建：touch config # 创建config然后修改如下： 12345678910111213# 该文件用于配置私钥对应的服务器# Default github user(first@mail.com)Host github.com HostName github.com User git IdentityFile C:/Users/Administrator/.ssh/id_rsa # second user(second@mail.com) # 建一个github别名，新建的帐号使用这个别名做克隆和更新Host github2 HostName github.com User git IdentityFile C:/Users/Administrator/.ssh/id_rsa_work 打开新生成的~/.ssh/id_rsa2.pub文件，将里面的内容添加到GitHub后台。 不同项目remote设置 不同的项目配置不同url123[remote &quot;origin&quot;] url = github2:username/myreps.git fetch = +refs/heads/*:refs/remotes/origin/* Git强制更新本地仓库1234git fetch --all git reset --hard origin/master #git reset --hard headgit pull 强覆盖用本地代码替代git仓库内容 git push -f（可解决Non-fast-forward） Git一次推送多个服务器编辑本地仓库的.git/config文件即可达到目的。[remote “all”] url = git@github.com:luoshupeng/commonuseppa.git url = git@gitcafe.com:chinesedragon/commonuseppa.git url = chinesedragon@gitcd.com:/commonuseppa这样，使用git push all即可一键Push到多个远程仓库中。 git 删除本地分支和远程分支【git 删除本地分支】git branch -D br【git 删除远程分支】git push origin :br (origin 后面有空格)git push -f git放弃对当前文件夹的所有文件的修改？git checkout . 撤销尚未提交的修改git checkout head . （尚未git add ） 本地代码回滚和远程代码库回滚git代码库回滚: 指的是将代码库某分支退回到以前的某个commit id【本地代码库回滚】：git reset –hard commit-id :回滚到commit-id，讲commit-id之后提交的commit都去除 （已经add commit的 ）git reset –hard HEAD~3：将最近3次的提交回滚【远程代码库回滚】：这个是重点要说的内容，过程比本地回滚要复杂应用场景：自动部署系统发布后发现问题，需要回滚到某一个commit，再重新发布原理：先将本地分支退回到某个commit，删除远程分支，再重新push本地分支操作步骤：1、git checkout the_branch2、git pull3、git branch the_branch_backup //备份一下这个分支当前的情况4、git reset –hard the_commit_id //把the_branch本地回滚到the_commit_id5、git push origin :the_branch //删除远程 the_branch6、git push origin the_branch //用回滚后的本地分支重新建立远程分支7、git push origin :the_branch_backup //如果前面都成功了，删除这个备份分支","raw":null,"content":null,"categories":[{"name":"技术","slug":"技术","permalink":"https://blog.wzjs010.cc/categories/技术/"},{"name":"Git","slug":"技术/Git","permalink":"https://blog.wzjs010.cc/categories/技术/Git/"}],"tags":[{"name":"git","slug":"git","permalink":"https://blog.wzjs010.cc/tags/git/"},{"name":"技术","slug":"技术","permalink":"https://blog.wzjs010.cc/tags/技术/"}]},{"title":"最近感想","slug":"最近感想","date":"2017-07-24T16:56:39.000Z","updated":"2018-12-04T08:26:41.002Z","comments":true,"path":"2017/07/25/最近感想/","link":"","permalink":"https://blog.wzjs010.cc/2017/07/25/最近感想/","excerpt":"","text":"感想今天自己的另一半去了一个新的地方工作，那个地方在城市的另一边，还好管住。这意味着以后的一段时间里每天我会有自己的时间研究自己想研究的东西，再也不会被人打断了。一切人东西都是双面性的，她在有她的好处，每天可以聊聊天，做饭、刷碗，都是些琐事，但也过的“充实”。 她不在的这段时间里，我该怎样安排自己的工作和生活？ 在公司还是以公司工作为主，公司下班的那会儿自己可以做另外的任务。 晚上回来后开始研究技术，一个技术、一个框架、一个项目的去研究，争取研究精，注意核心的实现细节。 每天依然应该除了工作学习还应该去锻炼，跑步啥的。偶尔跑跑出出汗应该也是不错的。 可以和曾经一块工作的朋友聊聊坐坐，看看有没有什么好项目，新的点子。 每天家里应该保持整洁、饭也应该按时吃。 每天应该坚持学习，不求多，但求精。从点滴去积累。 总之、有了更多的自由，不用担心吵住它或被她吵住了。自由的安排、实行吧。 还有，我觉得日常生活、技术笔记应该经常去记录，应该经常去回头看自己的经历并总结，避免失误。","raw":null,"content":null,"categories":[{"name":"生活","slug":"生活","permalink":"https://blog.wzjs010.cc/categories/生活/"},{"name":"感想","slug":"生活/感想","permalink":"https://blog.wzjs010.cc/categories/生活/感想/"}],"tags":[{"name":"感想","slug":"感想","permalink":"https://blog.wzjs010.cc/tags/感想/"}]},{"title":"项目快速开发技巧","slug":"项目快速开发技巧","date":"2017-07-14T00:51:33.000Z","updated":"2018-12-04T08:26:41.002Z","comments":true,"path":"2017/07/14/项目快速开发技巧/","link":"","permalink":"https://blog.wzjs010.cc/2017/07/14/项目快速开发技巧/","excerpt":"","text":"业务流程 功能模块 处理次序 例子：团购订单自动超时退款流程 获取当前超时团购单，获取已付款超时订单 设置超时订单状态 自动退款，退款完成改退款状态","raw":null,"content":null,"categories":[{"name":"技术","slug":"技术","permalink":"https://blog.wzjs010.cc/categories/技术/"},{"name":"php","slug":"技术/php","permalink":"https://blog.wzjs010.cc/categories/技术/php/"}],"tags":[{"name":"快速开发","slug":"快速开发","permalink":"https://blog.wzjs010.cc/tags/快速开发/"}]},{"title":"云知梦Laravel笔记","slug":"云知梦Laravel笔记","date":"2017-07-03T14:41:53.000Z","updated":"2018-12-04T08:26:40.987Z","comments":true,"path":"2017/07/03/云知梦Laravel笔记/","link":"","permalink":"https://blog.wzjs010.cc/2017/07/03/云知梦Laravel笔记/","excerpt":"","text":"Composer安装 getcomposer 安装composer composer init composer install Laravel 安装 composer global require “laravel/install” github下载","raw":null,"content":null,"categories":[{"name":"技术","slug":"技术","permalink":"https://blog.wzjs010.cc/categories/技术/"},{"name":"php","slug":"技术/php","permalink":"https://blog.wzjs010.cc/categories/技术/php/"}],"tags":[{"name":"laravel","slug":"laravel","permalink":"https://blog.wzjs010.cc/tags/laravel/"},{"name":"笔记","slug":"笔记","permalink":"https://blog.wzjs010.cc/tags/笔记/"}]},{"title":"最近的计划","slug":"最近的计划","date":"2017-06-30T18:11:09.000Z","updated":"2018-12-04T08:26:40.987Z","comments":true,"path":"2017/07/01/最近的计划/","link":"","permalink":"https://blog.wzjs010.cc/2017/07/01/最近的计划/","excerpt":"","text":"时间是宝贵的东西 最近做的事情日常工作一直按部就班，没有波浪，平平淡淡。偶尔有所收获，有点小进步，但整体时间规划不好。生活工作比较混乱。希望能够整理下心情。 计划的事情 最近计划把做过的项目温习巩固下，学的多，吃不透等于不是自己的，不能够信手拈来。项目做的多了，虽然熟练了，但是还需要精通。 把用不着的东西转让出去把，其实得到的越少，既是拥有的越多。不必有那么多的烦心事。 生活中要安排合理，休息工作娱乐休闲要安排得当。","raw":null,"content":null,"categories":[{"name":"生活","slug":"生活","permalink":"https://blog.wzjs010.cc/categories/生活/"},{"name":"感想","slug":"生活/感想","permalink":"https://blog.wzjs010.cc/categories/生活/感想/"}],"tags":[{"name":"计划","slug":"计划","permalink":"https://blog.wzjs010.cc/tags/计划/"},{"name":"生活","slug":"生活","permalink":"https://blog.wzjs010.cc/tags/生活/"}]},{"title":"项目开发步骤和习惯","slug":"项目开发步骤和习惯","date":"2017-06-09T01:46:59.000Z","updated":"2018-12-04T08:26:40.987Z","comments":true,"path":"2017/06/09/项目开发步骤和习惯/","link":"","permalink":"https://blog.wzjs010.cc/2017/06/09/项目开发步骤和习惯/","excerpt":"前言在软件开发、程序设计中，我们会遇到各种阻碍开发进度和效率、速度的坑，如何能够优雅、快速的开发软件，享受编程的快乐，对于入行不久的程序员确实有点困难。拿自己编写程序的经历简单的记录一下如何能够快速、优雅、兴致的开发软件，避免越干越没劲。\n开发中不好的习惯\n一个项目中代码风格不一致\n项目中变量、方法等命名不规范\n代码组织混乱、结构不清晰，未对代码进行重用\n遇到难的问题不解决不罢休、浪费宝贵工作时间\n","text":"前言在软件开发、程序设计中，我们会遇到各种阻碍开发进度和效率、速度的坑，如何能够优雅、快速的开发软件，享受编程的快乐，对于入行不久的程序员确实有点困难。拿自己编写程序的经历简单的记录一下如何能够快速、优雅、兴致的开发软件，避免越干越没劲。 开发中不好的习惯 一个项目中代码风格不一致 项目中变量、方法等命名不规范 代码组织混乱、结构不清晰，未对代码进行重用 遇到难的问题不解决不罢休、浪费宝贵工作时间 开发中遇到问题的解决办法 为了加快开发 速度 ，在项目结构合理的基础上可以 先实现leader要求 的基础功能，并记录下可以扩充的复杂功能，在基础功能没有问题后再进行逐步完善，这样可以提高开发速度。 对于遇到问题能够短时间解决尽快通过查资料解决；对于不是十分重要但十分难过的坎儿，比较难的问题，先跳过并记录下来，然后利用闲暇时间例如晚上着重解决并最好作技术记录，作为技术积累。 高效开发的良好习惯 遵循psr通用风格 良好的设计模式 项目目录、代码结构合理组织 善用接口和继承 善于代码重用 更小更精细单一的功能细分、一个控制器、一个函数、一个方法最一件事情。","raw":null,"content":null,"categories":[{"name":"技术","slug":"技术","permalink":"https://blog.wzjs010.cc/categories/技术/"},{"name":"项目开发","slug":"技术/项目开发","permalink":"https://blog.wzjs010.cc/categories/技术/项目开发/"}],"tags":[{"name":"项目开发","slug":"项目开发","permalink":"https://blog.wzjs010.cc/tags/项目开发/"},{"name":"习惯","slug":"习惯","permalink":"https://blog.wzjs010.cc/tags/习惯/"},{"name":"步骤","slug":"步骤","permalink":"https://blog.wzjs010.cc/tags/步骤/"}]},{"title":"各浏览器跨域解决方案","slug":"各浏览器跨域解决方案","date":"2017-06-01T07:22:10.000Z","updated":"2018-12-04T08:26:40.987Z","comments":true,"path":"2017/06/01/各浏览器跨域解决方案/","link":"","permalink":"https://blog.wzjs010.cc/2017/06/01/各浏览器跨域解决方案/","excerpt":"","text":"","raw":null,"content":null,"categories":[{"name":"技术","slug":"技术","permalink":"https://blog.wzjs010.cc/categories/技术/"},{"name":"前端","slug":"技术/前端","permalink":"https://blog.wzjs010.cc/categories/技术/前端/"}],"tags":[{"name":"跨域","slug":"跨域","permalink":"https://blog.wzjs010.cc/tags/跨域/"}]},{"title":"好的编程习惯","slug":"好的编程习惯","date":"2017-05-15T07:43:33.000Z","updated":"2018-12-04T08:26:40.987Z","comments":true,"path":"2017/05/15/好的编程习惯/","link":"","permalink":"https://blog.wzjs010.cc/2017/05/15/好的编程习惯/","excerpt":"","text":"接口 纯类、纯方法（函数） 尽量不要改原有在你代码，除非是修改BUG，添加的功能尽量用新的方法。","raw":null,"content":null,"categories":[{"name":"技术","slug":"技术","permalink":"https://blog.wzjs010.cc/categories/技术/"},{"name":"项目开发","slug":"技术/项目开发","permalink":"https://blog.wzjs010.cc/categories/技术/项目开发/"}],"tags":[{"name":"编程习惯","slug":"编程习惯","permalink":"https://blog.wzjs010.cc/tags/编程习惯/"}]},{"title":"NodeJs框架基础","slug":"NodeJs框架基础","date":"2017-05-13T07:27:33.000Z","updated":"2018-12-04T08:26:40.987Z","comments":true,"path":"2017/05/13/NodeJs框架基础/","link":"","permalink":"https://blog.wzjs010.cc/2017/05/13/NodeJs框架基础/","excerpt":"Windows命令行\ncmd\ncls\nexit\nmkdir\ndir\nrmdir\nipconfig\nping\nstart\ntasklist\ntaskkill /f /im explorer.exe\ncd\nnetstat -ano     netstat -ano |find ‘445’\n\nSublime Nodejs插件\n新建编译系统 \n1234&#123;  &quot;cmd&quot;: [&quot;node&quot;,&quot;$file&quot;],  &quot;selector&quot;:&quot;source.js&quot;&#125;\n\nNodejs\n\nJavascript &amp; NodeJs Snippets\n\nNpm使用\nnpm list 查看本地模块\nnpm install  或npm i 安装npm模块 \nnpm uninstall 卸载npm模块\nnpm root 本地npm模块\nnpm update 升级指定模块  \n\n命令中加-g 代表全局","text":"Windows命令行 cmd cls exit mkdir dir rmdir ipconfig ping start tasklist taskkill /f /im explorer.exe cd netstat -ano netstat -ano |find ‘445’ Sublime Nodejs插件 新建编译系统 1234&#123; &quot;cmd&quot;: [&quot;node&quot;,&quot;$file&quot;], &quot;selector&quot;:&quot;source.js&quot;&#125; Nodejs Javascript &amp; NodeJs Snippets Npm使用 npm list 查看本地模块 npm install 或npm i 安装npm模块 npm uninstall 卸载npm模块 npm root 本地npm模块 npm update 升级指定模块 命令中加-g 代表全局 Node中的事件驱动Node模块自定义模块module.export=new show() 函数 常用函数 匿名函数 Node路由GET/Post ,index.js 负责加载不同的界面，一个入口，分配不同的页面上去。 Nodejs全局对象 __filename __dirname console.log() info() warn() error() time() timeEnd() process()process.versionprocess.argvprocess.pidprocess.titleprocess.plateformprocess.cwd()process.memoryUsage()process.uptime()process.stout() setTimeout() 超时器 setInterval() 定时器 文件系统常用工具模块","raw":null,"content":null,"categories":[{"name":"技术","slug":"技术","permalink":"https://blog.wzjs010.cc/categories/技术/"},{"name":"NodeJs","slug":"技术/NodeJs","permalink":"https://blog.wzjs010.cc/categories/技术/NodeJs/"}],"tags":[{"name":"NodeJs","slug":"NodeJs","permalink":"https://blog.wzjs010.cc/tags/NodeJs/"}]},{"title":"Sublime常用插件整理","slug":"Sublime常用插件整理","date":"2017-05-13T03:21:40.000Z","updated":"2018-12-04T08:26:40.987Z","comments":true,"path":"2017/05/13/Sublime常用插件整理/","link":"","permalink":"https://blog.wzjs010.cc/2017/05/13/Sublime常用插件整理/","excerpt":"功能特性\nSublime Text 是一个代码编辑器（Sublime Text 2是收费软件，但可以无限期试用），也是HTML和散文先进的文本编辑器。Sublime Text是由程序员Jon Skinner于2008年1月份所开发出来，它最初被设计为一个具有丰富扩展功能的Vim。Sublime Text具有漂亮的用户界面和强大的功能，例如代码缩略图，Python的插件，代码段等。还可自定义键绑定，菜单和工具栏。Sublime Text 的主要功能包括：拼写检查，书签，完整的 Python API ， Goto 功能，即时项目切换，多选择，多窗口等等。Sublime Text 是一个跨平台的编辑器，同时支持Windows、Linux、Mac OS X等操作系统。  \n\n插件管理\n安装Package Control按Ctrl+`调出console粘贴安装代码（见扩展阅读）到底部命令行并回车：重启Sublime Text 2。如果在Perferences-&gt;package settings中看到package control这一项，则安装成功。可以到官网链接（见扩展阅读）下载Package Control.sublime-package放到sublime安装目录里的data里installed package文件夹（这个文件夹位置可能会不一样）\n用Package Control安装其他插件按下Ctrl+Shift+P调出命令面板输入install 调出 Install Package 选项并回车，然后在列表中选中要安装的插件。\n","text":"功能特性 Sublime Text 是一个代码编辑器（Sublime Text 2是收费软件，但可以无限期试用），也是HTML和散文先进的文本编辑器。Sublime Text是由程序员Jon Skinner于2008年1月份所开发出来，它最初被设计为一个具有丰富扩展功能的Vim。Sublime Text具有漂亮的用户界面和强大的功能，例如代码缩略图，Python的插件，代码段等。还可自定义键绑定，菜单和工具栏。Sublime Text 的主要功能包括：拼写检查，书签，完整的 Python API ， Goto 功能，即时项目切换，多选择，多窗口等等。Sublime Text 是一个跨平台的编辑器，同时支持Windows、Linux、Mac OS X等操作系统。 插件管理 安装Package Control按Ctrl+`调出console粘贴安装代码（见扩展阅读）到底部命令行并回车：重启Sublime Text 2。如果在Perferences-&gt;package settings中看到package control这一项，则安装成功。可以到官网链接（见扩展阅读）下载Package Control.sublime-package放到sublime安装目录里的data里installed package文件夹（这个文件夹位置可能会不一样） 用Package Control安装其他插件按下Ctrl+Shift+P调出命令面板输入install 调出 Install Package 选项并回车，然后在列表中选中要安装的插件。 常用插件 CTags MarkdownEditing Markdown Preview Terminal FTPSync","raw":null,"content":null,"categories":[{"name":"技术","slug":"技术","permalink":"https://blog.wzjs010.cc/categories/技术/"},{"name":"常用软件","slug":"技术/常用软件","permalink":"https://blog.wzjs010.cc/categories/技术/常用软件/"}],"tags":[{"name":"Sublime","slug":"Sublime","permalink":"https://blog.wzjs010.cc/tags/Sublime/"},{"name":"插件","slug":"插件","permalink":"https://blog.wzjs010.cc/tags/插件/"}]},{"title":"Golang学习笔记","slug":"Golang学习笔记","date":"2017-05-11T07:20:16.000Z","updated":"2018-12-04T08:26:40.987Z","comments":true,"path":"2017/05/11/Golang学习笔记/","link":"","permalink":"https://blog.wzjs010.cc/2017/05/11/Golang学习笔记/","excerpt":"Go Web 编程-极客学院Wiki下面是读这本书的笔记 \ngo环境配置\nGo安装三种安装方式，源码安装、压缩包安装 \nGOPATH和工作空间作用？工作空间的目录结构\nGO命令\n\ngo build\n如果是普通包，就像我们在1.2节中编写的mymath包那样，当你执行go build之后，它不会产生任何文件。如果你需要在$GOPATH/pkg下生成相应的文件，那就得执行go install。\n如果是main包，当你执行go build之后，它就会在当前目录下生成一个可执行文件。如果你需要在$GOPATH/bin下生成相应的文件，需要执行go install，或者使用go build -o 路径/a.exe。\n你也可以指定编译输出的文件名。例如1.2节中的mathapp应用，我们可以指定go build -o astaxie.exe，默认情况是你的package名(非main包)，或者是第一个源文件的文件名(main包)。（注：实际上，package名在Go语言规范中指代码中“package”后使用的名称，此名称可以与文件夹名不同。默认生成的可执行文件名是文件夹名。） \ngo build会忽略目录下以“_”或“.”开头的go文件。\n如果你的源代码针对不同的操作系统需要不同的处理，那么你可以根据不同的操作系统后缀来命名文件。例如有一个读取数组的程序，它对于不同的操作系统可能有如下几个源文件：array_linux.go array_darwin.go array_windows.go array_freebsd.gogo build的时候会选择性地编译以系统名结尾的文件（Linux、Darwin、Windows、Freebsd）。例如Linux系统下面编译只会选择array_linux.go文件，其它系统命名后缀文件全部忽略。参数的介绍\n-o 指定输出的文件名，可以带上路径，例如 go build -o a/b/c\n-i 安装相应的包，编译+go install\n-a 更新全部已经是最新的包的，但是对标准包不适用\n-n 把需要执行的编译命令打印出来，但是不执行，这样就可以很容易的知道底层是如何运行的\n-p n 指定可以并行可运行的编译数目，默认是CPU数目\n-race 开启编译的时候自动检测数据竞争的情况，目前只支持64位的机器\n-v 打印出来我们正在编译的包名\n-work 打印出来编译时候的临时文件夹名称，并且如果已经存在的话就不要删除\n-x 打印出来执行的命令，其实就是和-n的结果类似，只是这个会执行\n-ccflags &#39;arg list&#39; 传递参数给5c, 6c, 8c 调用\n-compiler name 指定相应的编译器，gccgo还是gc\n-gccgoflags &#39;arg list&#39; 传递参数给gccgo编译连接调用\n-gcflags &#39;arg list&#39; 传递参数给5g, 6g, 8g 调用\n-installsuffix suffix 为了和默认的安装包区别开来，采用这个前缀来重新安装那些依赖的包，-race的时候默认已经是-installsuffix race,大家可以通过-n命令来验证\n-ldflags &#39;flag list&#39; 传递参数给5l, 6l, 8l 调用\n-tags &#39;tag list&#39; 设置在编译的时候可以适配的那些tag，详细的tag限制参考里面的 Build Constraints  \n\n\n\n\ngo clean  这个命令是用来移除当前源码包和关联源码包里面编译生成的文件。\ngo fmt 代码格式化用go fmt命令，其实是调用了gofmt，而且需要参数-w，否则格式化结果不会写入文件。gofmt -w -l src，可以格式化整个项目。所以go fmt是gofmt的上层一个包装的命令，我们想要更多的个性化的格式化可以参考 gofmtgofmt的参数介绍\n-l 显示那些需要格式化的文件\n\n\n\n\n-w 把改写后的内容直接写入到文件中，而不是作为结果打印到标准输出。\n-r 添加形如“a[b:len(a)] -&gt; a[b:]”的重写规则，方便我们做批量替换\n-s 简化文件中的代码\n-d 显示格式化前后的diff而不是写入文件，默认是false\n-e 打印所有的语法错误到标准输出。如果不使用此标记，则只会打印不同行的前10个错误。\n-cpuprofile 支持调试模式，写入相应的cpufile到指定的文件\n\n\ngo get 这个命令是用来动态获取远程代码包的这个命令在内部实际上分成了两步操作：第一步是下载源码包，第二步是执行go install。下载源码包的go工具会自动根据不同的域名调用不同的源码工具，参数 -d 之只下载不安装\ngo install 这个命令在内部实际上分成了两步操作：第一步是生成结果文件(可执行文件或者.a包)，第二步会把编译好的结果移到$GOPATH/pkg或者$GOPATH/bin。\ngo test  执行这个命令，会自动读取源码目录下面名为*_test.go的文件，生成并运行测试用的可执行文件。\ngo tool  下面下载聚集了很多命令\ngo generate   这个命令是从Go1.4开始才设计的，用于在编译前自动化生成某类代码。\ngodoc  在Go1.2版本之前还支持go doc命令，但是之后全部已到了godoc这个命令下，需要这样安装go get \n\ngo version 查看go当前的版本go env 查看当前go的环境变量go list 列出当前全部安装的packagego run 编译并运行Go程序  \n\n\n\n\n开发工具\n\nSublime Text\nPHPStorm \nLiteIDE\n\n\n","text":"Go Web 编程-极客学院Wiki下面是读这本书的笔记 go环境配置 Go安装三种安装方式，源码安装、压缩包安装 GOPATH和工作空间作用？工作空间的目录结构 GO命令 go build 如果是普通包，就像我们在1.2节中编写的mymath包那样，当你执行go build之后，它不会产生任何文件。如果你需要在$GOPATH/pkg下生成相应的文件，那就得执行go install。 如果是main包，当你执行go build之后，它就会在当前目录下生成一个可执行文件。如果你需要在$GOPATH/bin下生成相应的文件，需要执行go install，或者使用go build -o 路径/a.exe。 你也可以指定编译输出的文件名。例如1.2节中的mathapp应用，我们可以指定go build -o astaxie.exe，默认情况是你的package名(非main包)，或者是第一个源文件的文件名(main包)。（注：实际上，package名在Go语言规范中指代码中“package”后使用的名称，此名称可以与文件夹名不同。默认生成的可执行文件名是文件夹名。） go build会忽略目录下以“_”或“.”开头的go文件。 如果你的源代码针对不同的操作系统需要不同的处理，那么你可以根据不同的操作系统后缀来命名文件。例如有一个读取数组的程序，它对于不同的操作系统可能有如下几个源文件：array_linux.go array_darwin.go array_windows.go array_freebsd.gogo build的时候会选择性地编译以系统名结尾的文件（Linux、Darwin、Windows、Freebsd）。例如Linux系统下面编译只会选择array_linux.go文件，其它系统命名后缀文件全部忽略。参数的介绍 -o 指定输出的文件名，可以带上路径，例如 go build -o a/b/c -i 安装相应的包，编译+go install -a 更新全部已经是最新的包的，但是对标准包不适用 -n 把需要执行的编译命令打印出来，但是不执行，这样就可以很容易的知道底层是如何运行的 -p n 指定可以并行可运行的编译数目，默认是CPU数目 -race 开启编译的时候自动检测数据竞争的情况，目前只支持64位的机器 -v 打印出来我们正在编译的包名 -work 打印出来编译时候的临时文件夹名称，并且如果已经存在的话就不要删除 -x 打印出来执行的命令，其实就是和-n的结果类似，只是这个会执行 -ccflags &#39;arg list&#39; 传递参数给5c, 6c, 8c 调用 -compiler name 指定相应的编译器，gccgo还是gc -gccgoflags &#39;arg list&#39; 传递参数给gccgo编译连接调用 -gcflags &#39;arg list&#39; 传递参数给5g, 6g, 8g 调用 -installsuffix suffix 为了和默认的安装包区别开来，采用这个前缀来重新安装那些依赖的包，-race的时候默认已经是-installsuffix race,大家可以通过-n命令来验证 -ldflags &#39;flag list&#39; 传递参数给5l, 6l, 8l 调用 -tags &#39;tag list&#39; 设置在编译的时候可以适配的那些tag，详细的tag限制参考里面的 Build Constraints go clean 这个命令是用来移除当前源码包和关联源码包里面编译生成的文件。 go fmt 代码格式化用go fmt命令，其实是调用了gofmt，而且需要参数-w，否则格式化结果不会写入文件。gofmt -w -l src，可以格式化整个项目。所以go fmt是gofmt的上层一个包装的命令，我们想要更多的个性化的格式化可以参考 gofmtgofmt的参数介绍 -l 显示那些需要格式化的文件 -w 把改写后的内容直接写入到文件中，而不是作为结果打印到标准输出。 -r 添加形如“a[b:len(a)] -&gt; a[b:]”的重写规则，方便我们做批量替换 -s 简化文件中的代码 -d 显示格式化前后的diff而不是写入文件，默认是false -e 打印所有的语法错误到标准输出。如果不使用此标记，则只会打印不同行的前10个错误。 -cpuprofile 支持调试模式，写入相应的cpufile到指定的文件 go get 这个命令是用来动态获取远程代码包的这个命令在内部实际上分成了两步操作：第一步是下载源码包，第二步是执行go install。下载源码包的go工具会自动根据不同的域名调用不同的源码工具，参数 -d 之只下载不安装 go install 这个命令在内部实际上分成了两步操作：第一步是生成结果文件(可执行文件或者.a包)，第二步会把编译好的结果移到$GOPATH/pkg或者$GOPATH/bin。 go test 执行这个命令，会自动读取源码目录下面名为*_test.go的文件，生成并运行测试用的可执行文件。 go tool 下面下载聚集了很多命令 go generate 这个命令是从Go1.4开始才设计的，用于在编译前自动化生成某类代码。 godoc 在Go1.2版本之前还支持go doc命令，但是之后全部已到了godoc这个命令下，需要这样安装go get go version 查看go当前的版本go env 查看当前go的环境变量go list 列出当前全部安装的packagego run 编译并运行Go程序 开发工具 Sublime Text PHPStorm LiteIDE Go语言基础 Go使用package（和Python的模块类似）来组织代码。main.main()函数(这个函数位于主包）是每一个独立的可运行程序的入口点。Go使用UTF-8字符串和标识符(因为UTF-8的发明者也就是Go的发明者)，所以它天生支持多语言。 基础知识 定义变量定义一个名称为“variableName”，类型为”type”的变量 var variableName type定义三个类型都是“type”的变量var vname1, vname2, vname3 type初始化“variableName”的变量为“value”值，类型是“type” var variableName type = value定义三个类型都是”type”的变量,并且分别初始化为相应的值 vname1为v1，vname2为v2，vname3为v3 var vname1, vname2, vname3 type= v1, v2, v3定义三个变量，它们分别初始化为相应的值 vname1为v1，vname2为v2，vname3为v3 编译器会根据初始化的值自动推导出相应的类型 vname1, vname2, vname3 := v1, v2, v3流程和函数流程控制 if Go里面if条件判断语句中不需要括号，如下代码所示 12345if x &gt; 10 &#123; fmt.Println(\"x is greater than 10\")&#125; else &#123; fmt.Println(\"x is less than 10\")&#125; goto 用goto跳转到必须在当前函数内定义的标签。 1234567 func myFunc() &#123; i := 0Here: //这行的第一个词，以冒号结束作为标签 println(i) i++ goto Here //跳转到Here去&#125; for Go里面最强大的一个控制逻辑就是for，它即可以用来循环读取数据，又可以当作while来控制逻辑，还能迭代操作。它的语法如下： 123for expression1; expression2; expression3 &#123; //...&#125; expression1、expression2和expression3都是表达式，其中expression1和expression3是变量声明或者函数调用返回值之类的，expression2是用来条件判断，expression1在循环开始之前调用，expression3在每轮循环结束之时调用。通常用法1234567891011package mainimport \"fmt\"func main()&#123; sum := 0; for index:=0; index &lt; 10 ; index++ &#123; sum += index &#125; fmt.Println(\"sum is equal to \", sum)&#125;// 输出：sum is equal to 45 循环1234sum := 1for ; sum &lt; 1000; &#123; sum += sum&#125; 简写1234sum := 1for sum &lt; 1000 &#123; sum += sum&#125; for 中有break 、continue12345678for index := 10; index&gt;0; index-- &#123; if index == 5&#123; break // 或者continue &#125; fmt.Println(index)&#125;// break打印出来10、9、8、7、6// continue打印出来10、9、8、7、6、4、3、2、1 for配合range可以用于读取slice和map的数据：1234for k,v:=range map &#123; fmt.Println(\"map's key:\",k) fmt.Println(\"map's val:\",v)&#125; 由于 Go 支持 “多值返回”, 而对于“声明而未被调用”的变量, 编译器会报错, 在这种情况下, 可以使用_来丢弃不需要的返回值 例如123for _, v := range map&#123; fmt.Println(\"map's val:\", v)&#125; switch if 不够用使用switch 12345678910switch sExpr &#123;case expr1: some instructionscase expr2: some other instructionscase expr3: some other instructionsdefault: other code&#125; another1234567891011121314151617181920integer := 6switch integer &#123;case 4: fmt.Println(\"The integer was &lt;= 4\") fallthroughcase 5: fmt.Println(\"The integer was &lt;= 5\") fallthroughcase 6: fmt.Println(\"The integer was &lt;= 6\") fallthroughcase 7: fmt.Println(\"The integer was &lt;= 7\") fallthroughcase 8: fmt.Println(\"The integer was &lt;= 8\") fallthroughdefault: fmt.Println(\"default case\")&#125; 函数函数是Go里面的核心设计，它通过关键字func来声明，它的格式如下：12345func funcName(input1 type1, input2 type2) (output1 type1, output2 type2) &#123; //这里是处理逻辑代码 //返回多个值 return value1, value2&#125; 关键字func用来声明一个函数funcName函数可以有一个或者多个参数，每个参数后面带有类型，通过,分隔函数可以返回多个值上面返回值声明了两个变量output1和output2，如果你不想声明也可以，直接就两个类型如果只有一个返回值且不声明返回值变量，那么你可以省略 包括返回值 的括号如果没有返回值，那么就直接省略最后的返回信息如果有返回值， 那么必须在函数的外层添加return语句1234567891011121314151617181920212223package mainimport \"fmt\"// 返回a、b中最大值.func max(a, b int) int &#123; if a &gt; b &#123; return a &#125; return b&#125;func main() &#123; x := 3 y := 4 z := 5 max_xy := max(x, y) //调用函数max(x, y) max_xz := max(x, z) //调用函数max(x, z) fmt.Printf(\"max(%d, %d) = %d\\n\", x, y, max_xy) fmt.Printf(\"max(%d, %d) = %d\\n\", x, z, max_xz) fmt.Printf(\"max(%d, %d) = %d\\n\", y, z, max(y,z)) // 也可在这直接调用它&#125; 多个返回值1234567891011121314151617package mainimport \"fmt\"//返回 A+B 和 A*Bfunc SumAndProduct(A, B int) (int, int) &#123; return A+B, A*B&#125;func main() &#123; x := 3 y := 4 xPLUSy, xTIMESy := SumAndProduct(x, y) fmt.Printf(\"%d + %d = %d\\n\", x, y, xPLUSy) fmt.Printf(\"%d * %d = %d\\n\", x, y, xTIMESy)&#125; 变参 func myfunc(arg …int) {}传值与传指针 当我们传一个参数值到被调用函数里面时，实际上是传了这个值的一份copy，当在被调用函数中修改参数值的时候，调用函数中相应实参不会发生任何变化，因为数值变化只作用在copy上。传指针使得多个函数能操作同一个对象。传指针比较轻量级 (8bytes),只是传内存地址，我们可以用指针传递体积大的结构体。如果用参数值传递的话, 在每次copy上面就会花费相对较多的系统开销（内存和时间）。所以当你要传递大的结构体的时候，用指针是一个明智的选择。Go语言中channel，slice，map这三种类型的实现机制类似指针，所以可以直接传递，而不用取地址后传递指针。（注：若函数需改变slice的长度，则仍需要取地址传递指针） deferPanic和Recover struct类型 Go语言中，也和C或者其他语言一样，我们可以声明新的类型，作为其它类型的属性或字段的容器。例如，我们可以创建一个自定义类型person代表一个人的实体。这个实体拥有属性：姓名和年龄。这样的类型我们称之struct。如下代码所示:1234567891011121314type person struct &#123; name string age int&#125;type person struct &#123; name string age int&#125;var P person // P现在就是person类型的变量了P.name = \"Astaxie\" // 赋值\"Astaxie\"给P的name属性.P.age = 25 // 赋值\"25\"给变量P的age属性fmt.Printf(\"The person's name is %s\", P.name) // 访问P的name属性. 除了上面这种P的声明使用之外，还有另外几种声明使用方式： 1.按照顺序提供初始化值 P := person{“Tom”, 25} 2.通过field:value的方式初始化，这样可以任意顺序 P := person{age:24, name:”Tom”} 3.当然也可以通过new函数分配一个指针，此处P的类型为*person P := new(person) 面向对象带有接收者的函数，我们称为method计算面积的例子1234567891011121314151617181920212223242526272829303132333435363738394041424344454647//原始的函数package mainimport \"fmt\"type Rectangle struct &#123; width, height float64&#125;func area(r Rectangle) float64 &#123; return r.width*r.height&#125;func main() &#123; r1 := Rectangle&#123;12, 2&#125; r2 := Rectangle&#123;9, 4&#125; fmt.Println(\"Area of r1 is: \", area(r1)) fmt.Println(\"Area of r2 is: \", area(r2))&#125;//接受者type Rectangle struct &#123; width, height float64&#125;type Circle struct &#123; radius float64&#125;func (r Rectangle) area() float64 &#123; return r.width*r.height&#125;func (c Circle) area() float64 &#123; return c.radius * c.radius * math.Pi&#125;func main() &#123; r1 := Rectangle&#123;12, 2&#125; r2 := Rectangle&#123;9, 4&#125; c1 := Circle&#123;10&#125; c2 := Circle&#123;25&#125; fmt.Println(\"Area of r1 is: \", r1.area()) fmt.Println(\"Area of r2 is: \", r2.area()) fmt.Println(\"Area of c1 is: \", c1.area()) fmt.Println(\"Area of c2 is: \", c2.area())&#125; method继承12345678910111213141516171819202122232425262728293031package mainimport \"fmt\"type Human struct &#123; name string age int phone string&#125;type Student struct &#123; Human //匿名字段 school string&#125;type Employee struct &#123; Human //匿名字段 company string&#125;//在human上面定义了一个methodfunc (h *Human) SayHi() &#123; fmt.Printf(\"Hi, I am %s you can call me on %s\\n\", h.name, h.phone)&#125;func main() &#123; mark := Student&#123;Human&#123;\"Mark\", 25, \"222-222-YYYY\"&#125;, \"MIT\"&#125; sam := Employee&#123;Human&#123;\"Sam\", 45, \"111-888-XXXX\"&#125;, \"Golang Inc\"&#125; mark.SayHi() sam.SayHi()&#125; interface Go语言里面设计最精妙的应该算interface，它让面向对象，内容组织实现非常的方便简单的说，interface是一组method的组合，我们通过interface来定义对象的一组行为。 并发 goroutine goroutine是通过Go的runtime管理的一个线程管理器。goroutine通过go关键字实现了，其实就是一个普通的函数。 123456789101112131415161718package mainimport ( \"fmt\" \"runtime\")func say(s string) &#123; for i := 0; i &lt; 5; i++ &#123; runtime.Gosched() fmt.Println(s) &#125;&#125;func main() &#123; go say(\"world\") //开一个新的Goroutines执行 say(\"hello\") //当前Goroutines执行&#125; runtime.Gosched()表示让CPU把时间片让给别人,下次某个时候继续恢复执行该goroutine channels goroutine运行在相同的地址空间，因此访问共享内存必须做好同步。那么goroutine之间如何进行数据的通信呢，Go提供了一个很好的通信机制channel。channel可以与Unix shell 中的双向管道做类比：可以通过它发送或者接收值。这些值只能是特定的类型：channel类型。定义一个channel时，也需要定义发送到channel的值的类型。注意，必须使用make 创建channel： 123456ci := make(chan int)cs := make(chan string)cf := make(chan interface&#123;&#125;)//channel通过操作符&lt;-来接收和发送数据ch &lt;- v // 发送v到channel ch.v := &lt;-ch // 从ch中接收数据，并赋值给v channel例子12345678910111213141516171819202122package mainimport \"fmt\"func sum(a []int, c chan int) &#123; total := 0 for _, v := range a &#123; total += v &#125; c &lt;- total // send total to c&#125;func main() &#123; a := []int&#123;7, 2, 8, -9, 4, 0&#125; c := make(chan int) go sum(a[:len(a)/2], c) go sum(a[len(a)/2:], c) x, y := &lt;-c, &lt;-c // receive from c fmt.Println(x, y, x + y)&#125; Buffered Channels12345678910111213package mainimport \"fmt\"func main() &#123; c := make(chan int, 2)//修改2为1就报错，修改2为3可以正常运行 c &lt;- 1 c &lt;- 2 fmt.Println(&lt;-c) fmt.Println(&lt;-c)&#125; //修改为1报如下的错误: //fatal error: all goroutines are asleep - deadlock! web基础 web工作原理 http包建立Web服务器123456789101112131415161718192021222324252627package mainimport ( \"fmt\" \"net/http\" \"strings\" \"log\")func sayhelloName(w http.ResponseWriter, r *http.Request) &#123; r.ParseForm() //解析参数，默认是不会解析的 fmt.Println(r.Form) //这些信息是输出到服务器端的打印信息 fmt.Println(\"path\", r.URL.Path) fmt.Println(\"scheme\", r.URL.Scheme) fmt.Println(r.Form[\"url_long\"]) for k, v := range r.Form &#123; fmt.Println(\"key:\", k) fmt.Println(\"val:\", strings.Join(v, \"\")) &#125; fmt.Fprintf(w, \"Hello astaxie!\") //这个写入到w的是输出到客户端的&#125;func main() &#123; http.HandleFunc(\"/\", sayhelloName) //设置访问的路由 err := http.ListenAndServe(\":9090\", nil) //设置监听的端口 if err != nil &#123; log.Fatal(\"ListenAndServe: \", err) &#125;&#125;","raw":null,"content":null,"categories":[{"name":"技术","slug":"技术","permalink":"https://blog.wzjs010.cc/categories/技术/"},{"name":"Golang","slug":"技术/Golang","permalink":"https://blog.wzjs010.cc/categories/技术/Golang/"}],"tags":[{"name":"Golang","slug":"Golang","permalink":"https://blog.wzjs010.cc/tags/Golang/"},{"name":"笔记","slug":"笔记","permalink":"https://blog.wzjs010.cc/tags/笔记/"}]},{"title":"Golang开发入门基本知识","slug":"Golang开发入门基本知识","date":"2017-05-11T06:22:34.000Z","updated":"2018-12-04T08:26:40.987Z","comments":true,"path":"2017/05/11/Golang开发入门基本知识/","link":"","permalink":"https://blog.wzjs010.cc/2017/05/11/Golang开发入门基本知识/","excerpt":"学习步骤\nGolang语言结构和语法的学习，参考网络上一些教程，边学边练，将基本知识点掌握。 \n参考Github上一些开源项目，熟悉其项目结构，学习其编程思想，培养好的编程习惯。 \n参与项目练手  \n\n入门基础资料\n《The Way to Go》中文译本，中文正式名《Go入门指南》  \nGo 语言入门基础教程_Go 语言开发学习书籍-极客学院Wiki \nGo 指南 \n文档 - Go 编程语言 \n\n掌握的知识点\n学习Go语言\nGo语言起源\n安装与运行环境\n集成开发环境和代码编辑器的使用\n\n\n语言核心结构\n数据结构和类型，变量、常量、数组切片、map、指针\n流程控制结构语句\n函数\n包结构\n结构和方法\n接口与反射\n\n\nGo高级编程\n项目组织结构\n包管理工具\n错误处理\nWeb编程\n\n\n","text":"学习步骤 Golang语言结构和语法的学习，参考网络上一些教程，边学边练，将基本知识点掌握。 参考Github上一些开源项目，熟悉其项目结构，学习其编程思想，培养好的编程习惯。 参与项目练手 入门基础资料 《The Way to Go》中文译本，中文正式名《Go入门指南》 Go 语言入门基础教程_Go 语言开发学习书籍-极客学院Wiki Go 指南 文档 - Go 编程语言 掌握的知识点 学习Go语言 Go语言起源 安装与运行环境 集成开发环境和代码编辑器的使用 语言核心结构 数据结构和类型，变量、常量、数组切片、map、指针 流程控制结构语句 函数 包结构 结构和方法 接口与反射 Go高级编程 项目组织结构 包管理工具 错误处理 Web编程 项目练习","raw":null,"content":null,"categories":[{"name":"技术","slug":"技术","permalink":"https://blog.wzjs010.cc/categories/技术/"},{"name":"Golang","slug":"技术/Golang","permalink":"https://blog.wzjs010.cc/categories/技术/Golang/"}],"tags":[{"name":"Golang","slug":"Golang","permalink":"https://blog.wzjs010.cc/tags/Golang/"},{"name":"入门","slug":"入门","permalink":"https://blog.wzjs010.cc/tags/入门/"}]},{"title":"常用软件总结","slug":"常用软件总结","date":"2017-04-08T07:33:24.000Z","updated":"2018-12-04T08:26:40.987Z","comments":true,"path":"2017/04/08/常用软件总结/","link":"","permalink":"https://blog.wzjs010.cc/2017/04/08/常用软件总结/","excerpt":"\n 简略整理\n 详细疏导\n 检查纠正\n\n经常在电脑前面，把常用软件归结一下。 \n优秀的程序代码编辑器下列的编辑器功能各有自己的特色，都能够加快开发效率，并且相关的插件都很丰富。是读写代码非常好的工具。大部分都是跨平台的。\n\nSublime text  \n\n 一款具有代码高亮、语法提示、自动完成且反应快速的编辑器软件，不仅具有华丽的界面，还支持插件扩展机制，用她来写代码，绝对是一种享受。相比于难于上手的Vim，浮肿沉重的Eclipse，VS，即便体积轻巧迅速启动的Editplus、Notepad++，在SublimeText面前大略显失色，无疑这款性感无比的编辑器是Coding和Writing最佳的选择，没有之一。  \n\n使用Sublime text 要善用插件，强大的插件可以加快开发效率。常用的插件列下 ：参见：\n\n官网Sublime Text - Download20 个强大的 Sublime Text 插件如何优雅地使用Sublime Text | 晚晴幽草轩Sublime Text 有哪些使用技巧？ - 知乎\n\n\nJetBrains Php Storm &amp;&amp; Pycharm  \n\nJetBrains 公司开发的编辑器都是最好的，方便、智能化。PhpStorm 是最好的PHP开发工具，使用它进行PHP开发将会让你感觉到编程的乐趣。Pycharm是Python最好的的开发工具。同样也有Java的开发工具。官网：JetBrains: Development Tools for Professionals and Teams\n\n\nAtom  \n\nAtom为GITHub出的一款代码编辑器，也拥有强大的插件。下载地址  \n\n\nVisual Studio Code  \n\n微软出的代码编辑器，官方网站  \n\n\nLiteIDE,Golang 开发小工具","text":"简略整理 详细疏导 检查纠正 经常在电脑前面，把常用软件归结一下。 优秀的程序代码编辑器下列的编辑器功能各有自己的特色，都能够加快开发效率，并且相关的插件都很丰富。是读写代码非常好的工具。大部分都是跨平台的。 Sublime text 一款具有代码高亮、语法提示、自动完成且反应快速的编辑器软件，不仅具有华丽的界面，还支持插件扩展机制，用她来写代码，绝对是一种享受。相比于难于上手的Vim，浮肿沉重的Eclipse，VS，即便体积轻巧迅速启动的Editplus、Notepad++，在SublimeText面前大略显失色，无疑这款性感无比的编辑器是Coding和Writing最佳的选择，没有之一。 使用Sublime text 要善用插件，强大的插件可以加快开发效率。常用的插件列下 ：参见： 官网Sublime Text - Download20 个强大的 Sublime Text 插件如何优雅地使用Sublime Text | 晚晴幽草轩Sublime Text 有哪些使用技巧？ - 知乎 JetBrains Php Storm &amp;&amp; Pycharm JetBrains 公司开发的编辑器都是最好的，方便、智能化。PhpStorm 是最好的PHP开发工具，使用它进行PHP开发将会让你感觉到编程的乐趣。Pycharm是Python最好的的开发工具。同样也有Java的开发工具。官网：JetBrains: Development Tools for Professionals and Teams Atom Atom为GITHub出的一款代码编辑器，也拥有强大的插件。下载地址 Visual Studio Code 微软出的代码编辑器，官方网站 LiteIDE,Golang 开发小工具 优秀的markdown编辑器 Markdown 是一种轻量级的「标记语言」，它的优点很多，目前也被越来越多的写作爱好者，撰稿者广泛使用。看到这里请不要被「标记」、「语言」所迷惑，Markdown 的语法十分简单。常用的标记符号也不超过十个，这种相对于更为复杂的HTML 标记语言来说，Markdown 可谓是十分轻量的，学习成本也不需要太多，且一旦熟悉这种语法规则，会有一劳永逸的效果。 markdown 其实向来是文字爱好者和码农们的小众需求，但市面上竟涌现出了这么多种形形色色的 Markdown 编辑器，Mou、Typed、Ulysess、Macdown 等等，各有特色，难分伯仲。 上述代码编辑软件很多都支持了markdown渲染，但比较顺手的还是以下几款markdown编辑器，有的有边写边预览功能。 马克飞象马克飞象是一款专为印象笔记（Evernote）打造的Markdown编辑器，通过精心的设计与技术实现，配合印象笔记强大的存储和同步功能，带来前所未有的书写体验。特点概述： 功能丰富 ：支持高亮代码块、LaTeX 公式、流程图，本地图片以及附件上传，甚至截图粘贴，工作学习好帮手； 得心应手 ：简洁高效的编辑器，提供[桌面客户端][1]以及[离线Chrome App][2]，支持移动端 Web； 深度整合 ：支持选择笔记本和添加标签，支持从印象笔记跳转编辑，轻松管理。官网马象下载Chrome 应用 MarkEditor Typora 简洁 、 跨平台 、 所见即所得 ，并且可定制性高，功能强大。 它将「写字」和「预览」这两件事情合并了，你输入的地方，也是输出的地方，即现在很流行的 WYSIWYG（What You See Is What You Get）。其实转念一想，这不就是回到了 Office Word 嘛，只不过编辑文本时不用再去工具栏上点选，一切的格式都能通过符号来控制。 点此进入 ：Typora — 官网 开发环境及调试、托管相关工具 VirtualBox &amp;&amp;VMware 虚拟机：面向桌面、应用、公有和混合云， 虚拟机软件 Vagrant PremiumSoft Navicat，mysql 工具 Telerik Fiddler ，接口调试 Wireshark，数据抓包 Xmanager =&gt;XShell等 ，Putty ssh连接 GitHub &amp;&amp; TortoiseSVN Google Cloud SDK | Google Cloud Platform PHPStudy方便php开发环境腾讯浏览器、微信调试 TBSSDK/TBS Stdio 微信WEB调试工具网站部署 FlashFXP常用的安卓模拟器 夜神 网络代理 海马玩 网络代理 android stdio 安卓sdk avd Andy 网络代理 blue stack 网络代理无法设置 tencent手游模拟器 常用编程语言 PHP Composer 中文网 、PHP: Hypertext Preprocessor The Go Programming Language Node.js Java Python Ruby 资料笔记保存工具 印象笔记 Evernote &gt; 快速摘录网站内容官网下载印象笔记 GitBook &amp;&amp; Calibre &gt; markdown文件快速制作ebookGitBook Editor官方下载calibre - E-book management WinHTTrack Website CopierHTTrack Website Copier官网下载 百度网盘 冰点文库(百度文库下载工具)Wiki程序 amwiki 安装npm install -g amwiki wiki.php wiki.php运行在php平台，是基于Markdown的wiki程序。你的Markdown存放在 wiki.php/_posts 目录下，以.md后缀的文件形式存放，程序简陋不支持在线编辑和备份，你可以尝试将_posts目录纳入git或svn中达到团队协作。git clone https://github.com/cmxiaocai/wiki.php.git deepwiki 常用浏览器 Firefox浏览器 火狐，是由Mozilla开发的网页浏览器。我们的 使命 是创造一个开放，创新与机遇的网络环境。下载 Firefox — Mozilla火狐浏览器扩展和插件很丰富，定制性很强，可以通过扩展方便浏览网页和开发调试网页程序。登陆火狐账号后可以实现扩展/账号/密码等的同步功能，极大的方便了网络应用。 Chrome浏览器功能同样十分强大，也有很多方便的插件可供下载使用。Chrome（桌面版）下载 ~~IE，有些网站还是不得不用IE ~~。换360安全浏览器，不用装太多插件，可以IE模式。装个adblock和llastpass 即可。 浏览器扩展 chrome Adblock Plus—Adblock Plus 已被超过 1 亿台设备使用，是世界上最受欢迎的广告拦截软件 Adobe Acrobat–将当前网页转换为 Adobe PDF 文件（仅限 Windows） Copy as Markdown–Copy Link or Image as Markdown code crxMouse Chrome™ Gestures, Gestures for Chrome(TM)汉化版.方便,快捷,充分发掘鼠标的所有操作.功能包括:鼠标手势,超级拖曳,滚轮手势,摇杆手势,平滑滚动,标签页列表等. Google 文档的离线功能，利用 Google 文档产品系列离线编辑文件。 Google翻译，浏览网页时可轻松查看翻译版本。由Google翻译小组提供。 JetBrains IDE Support，HTML/CSS/JavaScript editing and JavaScript debugging using JetBrains IDEs. jsonView jsonViewer json formatter 格式化，格式化、着色、美观、易读… jsonView处理了其他该类插件中文字符的bug,支持 json 和 jsonp 格式 Just Read，A customizable reader extensi LastPass: Free Password Manager，LastPass,屡获殊荣的密码管理器,保存你的密码,让你安全访问任何计算机和移动设备 Postman，调试接口利器 Proxy SwitchyOmega，轻松快捷地管理和切换多个代理设置 Push to Kindle，Send web articles to your Kindle Quick Javascript Switcher，Quick way to enable/disable Javascript Secure Shell，Terminal emulator and SSH client ，Chrome 应用 User-Agent Switcher for Chrome ，Spoofs &amp; Mimics User-Agent strings. 拷贝为 Markdown，将你在页面中选中的HTML格式转化为Markdown格式。 滴答清单 - Todo &amp; 任务提醒，简洁, 易用的待办和任务管理工具, 帮助您高效完成所有的事情, 合理规划时间, 让生活更轻松！ 金山词霸鼠标取词 firefox 二维码扫描器，解码 QRCode（二维码），无需网络连接 金山词霸鼠标取词，辅助金山词霸在浏览器中实现鼠标取词 网页翻译，使用火狐浏览英文网页，帮您一键翻译成中文，阅读无障碍。使用有道网页翻译2.0，您既可以选择全文翻译，也能按照您的英文水平、只翻译相应部分的词汇，阅读理解更方便。 网站 IP 信息查询，查询当前访问网站的 IP 地址的地理位置，国旗，所属 ASN，端口开放信息等信息。 印象笔记·剪藏，使用印象笔记扩展程序一键保存精彩网页内容到印象笔记帐户 Adblock Plus，广告已成往事 AutoProxy-ng，GFW was yesterday! Build Link Markdown ，Build a markdown link from the selected text or the current page’s title. Cookies Manager+ Dorando keyconfig FEBE,Backup your Firefox data Firebug,Web Development Evolved,下岗了，用火狐自带的调试器吧，Ctrl+shift+q Gesture Translate HostAdmin,HostAdmin是一个帮你管理Hosts的插件，它提供了一套增强的Hosts文件语法，帮你轻松完成切换Host的工作 HttpRequester,A tool for easily making HTTP requests (GET/PUT/POST/DELETE JSON Lite ,Fast JSON viewer - highlights, shows items count/size, handles large files JSON-DataView,Displays JSON data in a collapsible tree structure with syntax highlights. LastPass: Free Password Manager,Last Password you will ever need Markdown Viewer Push to Kindle RESTClient,RESTClient, a debugger for RESTful web services. S3.Google Translator sf-note-ext Show Location User-Agent Switcher,Quickly and easily switch between popular user-agent strings. 日常使用工具 腾讯QQ -&gt;腾讯TIM、 微信PC端 有道词典 or 金山词霸 TeamViewer Pdf文档查看 PhotoShop Foxmail &amp; MailBird &amp;Thunderbird 同步盘 OneDrive Google云端硬盘代理上网 shadowsocks · GitHub、Shadowsocks - A secure socks5 proxy SScap VPN Gate 下载 OpenVpn Kcptun GitHubGUI for KCPTun windows client Proxifier,- Bypass firewall and proxy, tunnel connections through an HTTPS and SOCKS proxy 任务清单 TickTick有客户端和浏览器插件，方便记录生活琐事，管理工作任务，让你的生活变得简单。 Wunderlist下载奇妙清单 - 为你的所有设备下载最佳待办事项应用休闲跑步 悦动圈 户外助手 行者户外 六只脚开机自启 Wunderlist 金山词霸 Foxmail Shadowsocks KcpTun Weixin未归类 Resilio Sync，BT新版 ZeroNet","raw":null,"content":null,"categories":[{"name":"技术","slug":"技术","permalink":"https://blog.wzjs010.cc/categories/技术/"},{"name":"常用软件","slug":"技术/常用软件","permalink":"https://blog.wzjs010.cc/categories/技术/常用软件/"}],"tags":[{"name":"生活","slug":"生活","permalink":"https://blog.wzjs010.cc/tags/生活/"},{"name":"软件","slug":"软件","permalink":"https://blog.wzjs010.cc/tags/软件/"}]},{"title":"Vue构建项目步骤","slug":"Vue构建项目步骤","date":"2017-03-06T06:54:02.000Z","updated":"2018-12-04T08:26:40.987Z","comments":true,"path":"2017/03/06/Vue构建项目步骤/","link":"","permalink":"https://blog.wzjs010.cc/2017/03/06/Vue构建项目步骤/","excerpt":"","text":"基本步骤 webpack.config.js定义程序入口 123456var webpackConfig = &#123; entry: &#123; &apos;main&apos;: &apos;./src/main.js&apos;, &apos;address&apos;: &apos;./src/address.js&apos;, &apos;order&apos;: &apos;./src/order.js&apos; &#125; address.js入口js，引入主View、router等组件","raw":null,"content":null,"categories":[{"name":"技术","slug":"技术","permalink":"https://blog.wzjs010.cc/categories/技术/"},{"name":"Vue","slug":"技术/Vue","permalink":"https://blog.wzjs010.cc/categories/技术/Vue/"}],"tags":[{"name":"vue","slug":"vue","permalink":"https://blog.wzjs010.cc/tags/vue/"}]},{"title":"17年计划","slug":"17年计划","date":"2017-03-02T13:03:17.000Z","updated":"2018-12-04T08:26:40.987Z","comments":true,"path":"2017/03/02/17年计划/","link":"","permalink":"https://blog.wzjs010.cc/2017/03/02/17年计划/","excerpt":"","text":"最近生活近期生活非常的凌乱，做个简单的总结： 书读少了最近看的书少了，感觉到了自己的浮澡，感觉心里沉不下来。 没有计划计划做的少了，更很少的去完成了 近期安排近期的一些打算 去读书让自己的心井下来 多运动需要一个健康的生活 早睡眠、早起床需要休息好 仅仅是一个测试文章，没有任何意义。","raw":null,"content":null,"categories":[{"name":"生活","slug":"生活","permalink":"https://blog.wzjs010.cc/categories/生活/"},{"name":"感想","slug":"生活/感想","permalink":"https://blog.wzjs010.cc/categories/生活/感想/"}],"tags":[{"name":"感想","slug":"感想","permalink":"https://blog.wzjs010.cc/tags/感想/"},{"name":"想法","slug":"想法","permalink":"https://blog.wzjs010.cc/tags/想法/"}]}]}